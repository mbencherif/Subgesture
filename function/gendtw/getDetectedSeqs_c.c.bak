/**
 * (C) Copyright 2014 Víctor Ponce-López <vponcel@uoc.edu>
 */

/** 
 * This is the C/MEX code that returns a logical vector with the detected
 * frames obtained from the optimal dynamic time warping path from two 
 * multi-dimensional signals
 *
 * compile: 
 *     mex getDetectedSeqs_c.c
 *
 * usage:
 *     detSeqLog=getDetectedSeqs_c(W,idx,detSeqLog)  
 *     where W is the Cost Matrix obtained from the dtw_c function which 
 *     computes the DTW matrix between two multi-dimensional signals, idx
 *     is a vector with the several thresholds values where matrix W must
 *     be cut at each time, and detSeqLog is the input logical vector to 
 *     modify.
 */

#include "matrix.h"
#include "mex.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

bool * getDetectedSeqs_c(bool * detSeqLog, float *w, int nw, int m, int *idx, int k)
{
    int i,j,l,n;
    int *se;
    float *w_cut;
    
    w_cut = NULL;
    /*    
    n=1;
    w_cut=(double *)malloc(nw*n*sizeof(double));     
    for(i=0;i<nw;i++)
    {
        for(j=0;j<n;j++)
        {
            if (i==0)
            {
                w_cut[j*(nw) +i] = 0;
            }
            else
            {
                w_cut[j*(nw) +i] = -1;
            }
        }
    }
    */
    
    for (l=0;l<k;l++)
    {
        n = idx[l]-1;
        if (!detSeqLog[n-1])
        {
            /*printf("%d ",n);*/
            w_cut=(float *)mxRealloc(w_cut,nw*n*sizeof(float));
            for (i=0;i<nw;i++)
            {
                for(j=0;j<n;j++)
                {
                    w_cut[j*(nw) +i] = w[(j+1)*(nw) +i];                    
                }
            }    
            /* print matrix values 
            printf("Matrix cutting point%d\n",n);
            for(i=0;i<nw;i++)
            {
                for(j=0;j<n;j++)
                {
                    printf("%f  ",w_cut[j*(nw) +i]);
                }
                printf("\n");
            }
             */            
            se = (int *)detectSeq_c(w_cut,nw,n);
            /*
            for (i=0;i<2;i++)
            {
                printf("%d ",se[i]);
            }
             */
            /*free(w_cut);*/
            for (j=se[0]-1;j<se[1];j++)
            {
                detSeqLog[j] = true;
                /*printf("%d,%d,%d,%d\n",se[0],se[1],j+1,detSeqLog[j]);*/
            }
        }
    }
    
    mxFree(w_cut);
    
    return detSeqLog;
}

/* the gateway function */
void mexFunction( int nlhs, mxArray *plhs[],
        int nrhs, const mxArray *prhs[])
{
    int nw,m,dims[2];
    int i,j,k,l;
    float *w;
    int *idx;
    bool *dp,*detSeqLog;
	
    /*  check for proper number of arguments */
    if(nrhs!=3)
    {
        mexErrMsgIdAndTxt( "MATLAB:aligngesture_c:invalidNumInputs",
                "Three arguments required.");
    }
    if(nlhs!=1)
    {
        mexErrMsgIdAndTxt( "MATLAB:dtw_c:invalidNumOutputs",
                "aligngesture_c: One output required.");
    }
    
    /*  create a pointer to the input matrix w */
    w = mxGetPr(prhs[0]);
    
    /*  get the dimensions of the matrix input w */
    nw = mxGetM(prhs[0]);
    m = mxGetN(prhs[0]);
    
    /*  create a pointer to the input vector idx */
    idx = mxGetPr(prhs[1]);
    k = mxGetN(prhs[1]);
    
    /*  create a pointer to the input vector detSeqLog */
    detSeqLog = mxGetPr(prhs[2]);
    l = mxGetN(prhs[2]);
      
    /*
    for(i=0;i<nw;i++)
    {
        for(j=1;j<m;j++)
        {
            printf("%f  ",w[j*(nw) +i]);
        }
        printf("\n");
    }
    */
    
    /*  set the output pointer to the output vector 
    for (i=0;i<l;i++)
    {
        printf("%d ",detSeqLog[i]);
    }
    printf("\n");
    */
     
    /*
    for (i=0;i<k;i++)
    {
        printf("%d ",idx[i]);
    }
     */
    
    detSeqLog = getDetectedSeqs_c(detSeqLog,w,nw,m,idx,k);
    
    dims[0] = 1;
    dims[1] = l;
    plhs[0] = mxCreateLogicalArray(2,dims);
    
    /*  create a C pointer to a copy of the output matrix */
    dp = mxGetPr(plhs[0]);
    
    for (i=0;i<2;i++)
    {
        memcpy(&dp[i],&detSeqLog[i],l*sizeof(bool));
    }
    
    /*
    for (i=0;i<l;i++)
    {
        printf("%d ",dp[i]);
    }
    printf("\n");
    */
    
    /*free(detSeqLog);*/
    
    return;
    
}
